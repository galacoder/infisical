services:
  nginx:
    type: docker
    envVars:
      TZ: UTC
    image: nginx
    instanceCount: 1
    plan: starter
    ports:
      - 80
      - 443
    privateNetworks:
      - name: render-internal
    volumes:
      - type: bind
        source: ./nginx/default.conf
        destination: /etc/nginx/conf.d/default.conf
    dependsOn:
      - frontend
      - backend
    healthCheck:
      httpGet:
        path: /
        port: 80
    internalDomains:
      - frontend:80
      - backend:80

  backend:
    type: docker
    envVars:
      NODE_ENV: production
    image: infisical/backend
    instanceCount: 1
    plan: starter
    privateNetworks:
      - name: render-internal
    dependsOn:
      - mongo
    healthCheck:
      tcp:
        port: 3000
      gracePeriodSeconds: 60
    internalDomains:
      - nginx
    secrets:
      - name: env
        mountPath: /app/.env

  frontend:
    type: docker
    envVars:
      INFISICAL_TELEMETRY_ENABLED: ${TELEMETRY_ENABLED}
      NEXT_PUBLIC_STRIPE_PRODUCT_PRO: ${STRIPE_PRODUCT_PRO}
      NEXT_PUBLIC_STRIPE_PRODUCT_TEAM: ${STRIPE_PRODUCT_TEAM}
      NEXT_PUBLIC_STRIPE_PRODUCT_STARTER: ${STRIPE_PRODUCT_STARTER}
    image: infisical/frontend
    instanceCount: 1
    plan: starter
    privateNetworks:
      - name: render-internal
    dependsOn:
      - backend
    healthCheck:
      httpGet:
        path: /
        port: 3000
      gracePeriodSeconds: 60
    internalDomains:
      - nginx
    secrets:
      - name: env
        mountPath: /app/.env

  mongo:
    type: docker
    envVars:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    image: mongo
    instanceCount: 1
    plan: starter
    privateNetworks:
      - name: render-internal
    volumes:
      - type: volume
        name: mongo-data
        mountPath: /data/db
    healthCheck:
      tcp:
        port: 27017
      gracePeriodSeconds: 60
    internalDomains:
      - backend:27017

volumes:
  mongo-data:
    type: disk
    size: 10

secrets:
  - name: env
    data: |
      NODE_ENV=production
      # add other environment variables here as necessary

networks:
  render-internal:
    type: render
    region: global
    serviceSubnet: 10.100.0.0/16
